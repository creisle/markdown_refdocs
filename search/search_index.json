{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Markdown Reference Docs This documentation (excluding this file) was generated by this package running pip install markdown_refdocs markdown_refdocs -o docs/reference markdown_refdocs These files we added to the navigation configuration of the mkdocs config. Finally mkdocs was run to build the files mkdocs build","title":"Home"},{"location":"#markdown-reference-docs","text":"This documentation (excluding this file) was generated by this package running pip install markdown_refdocs markdown_refdocs -o docs/reference markdown_refdocs These files we added to the navigation configuration of the mkdocs config. Finally mkdocs was run to build the files mkdocs build","title":"Markdown Reference Docs"},{"location":"reference/markdown_refdocs/main/","text":"markdown_refdocs.main class ModuleAnalyzer ModuleAnalyzer.get_function_def_segment() Get the source code lines covering the function defintion def get_function_def_segment ( self , node : ast . AST ) -> str : Args node ( ast.AST ) Returns str ModuleAnalyzer.visit_ClassDef() convert a class into markdown def visit_ClassDef ( self , node : ast . ClassDef ) -> str : Args node ( ast.ClassDef ) Returns str ModuleAnalyzer.visit_FunctionDef() convert a function into markdown def visit_FunctionDef ( self , node : ast . FunctionDef ) -> str : Args node ( ast.FunctionDef ) Returns str ModuleAnalyzer.visit_Module() Convert a module into markdown def visit_Module ( self , node : ast . Module ) -> str : Args node ( ast.Module ) Returns str parse_module_file() convert a module into markdown def parse_module_file ( filename : str , prefix : str = '' , hide_private : bool = True , hide_undoc : bool = True , hide_undoc_args : bool = True , namespace_headers : bool = False , ) -> str : Args filename ( str ): the path to the file to be read prefix ( str ): the portion of the path that is not part of the package hide_private ( bool ): hide privated functions, do not document (does not apply to init ) hide_undoc ( bool ): exclude undocumented functions (no docstring) hide_undoc_args ( bool ): do not list arguments with neither type nor description namespace_headers ( bool ) Returns str : the markdown string for this module","title":"markdown_refdocs.main"},{"location":"reference/markdown_refdocs/main/#markdown_refdocsmain","text":"","title":"markdown_refdocs.main"},{"location":"reference/markdown_refdocs/main/#class-moduleanalyzer","text":"","title":"class ModuleAnalyzer"},{"location":"reference/markdown_refdocs/main/#moduleanalyzerget_function_def_segment","text":"Get the source code lines covering the function defintion def get_function_def_segment ( self , node : ast . AST ) -> str : Args node ( ast.AST ) Returns str","title":"ModuleAnalyzer.get_function_def_segment()"},{"location":"reference/markdown_refdocs/main/#moduleanalyzervisit_classdef","text":"convert a class into markdown def visit_ClassDef ( self , node : ast . ClassDef ) -> str : Args node ( ast.ClassDef ) Returns str","title":"ModuleAnalyzer.visit_ClassDef()"},{"location":"reference/markdown_refdocs/main/#moduleanalyzervisit_functiondef","text":"convert a function into markdown def visit_FunctionDef ( self , node : ast . FunctionDef ) -> str : Args node ( ast.FunctionDef ) Returns str","title":"ModuleAnalyzer.visit_FunctionDef()"},{"location":"reference/markdown_refdocs/main/#moduleanalyzervisit_module","text":"Convert a module into markdown def visit_Module ( self , node : ast . Module ) -> str : Args node ( ast.Module ) Returns str","title":"ModuleAnalyzer.visit_Module()"},{"location":"reference/markdown_refdocs/main/#parse_module_file","text":"convert a module into markdown def parse_module_file ( filename : str , prefix : str = '' , hide_private : bool = True , hide_undoc : bool = True , hide_undoc_args : bool = True , namespace_headers : bool = False , ) -> str : Args filename ( str ): the path to the file to be read prefix ( str ): the portion of the path that is not part of the package hide_private ( bool ): hide privated functions, do not document (does not apply to init ) hide_undoc ( bool ): exclude undocumented functions (no docstring) hide_undoc_args ( bool ): do not list arguments with neither type nor description namespace_headers ( bool ) Returns str : the markdown string for this module","title":"parse_module_file()"},{"location":"reference/markdown_refdocs/markdown/","text":"markdown_refdocs.markdown function_md() Generate a markdown string for a function definition def function_md ( name : str , args : List [ Dict ] = [], returns : Dict = {}, raises : List [ Dict ] = [], source_defn : str = '' , source : str = '' , heading_level : int = 3 , desc : str = '' , note : str = '' , examples : List [ str ] = [], ) -> str : Args name ( str ) args ( List[Dict] ) returns ( Dict ) raises ( List[Dict] ) source_defn ( str ) source ( str ) heading_level ( int ) desc ( str ) note ( str ) examples ( List[str] ) Returns str","title":"markdown_refdocs.markdown"},{"location":"reference/markdown_refdocs/markdown/#markdown_refdocsmarkdown","text":"","title":"markdown_refdocs.markdown"},{"location":"reference/markdown_refdocs/markdown/#function_md","text":"Generate a markdown string for a function definition def function_md ( name : str , args : List [ Dict ] = [], returns : Dict = {}, raises : List [ Dict ] = [], source_defn : str = '' , source : str = '' , heading_level : int = 3 , desc : str = '' , note : str = '' , examples : List [ str ] = [], ) -> str : Args name ( str ) args ( List[Dict] ) returns ( Dict ) raises ( List[Dict] ) source_defn ( str ) source ( str ) heading_level ( int ) desc ( str ) note ( str ) examples ( List[str] ) Returns str","title":"function_md()"},{"location":"reference/markdown_refdocs/parsers/","text":"markdown_refdocs.parsers parse_google_docstring() parses a google-style docsting into a dictionary of the various sections def parse_google_docstring ( docstring : str ) -> Dict : Args docstring ( str ) Returns Dict","title":"markdown_refdocs.parsers"},{"location":"reference/markdown_refdocs/parsers/#markdown_refdocsparsers","text":"","title":"markdown_refdocs.parsers"},{"location":"reference/markdown_refdocs/parsers/#parse_google_docstring","text":"parses a google-style docsting into a dictionary of the various sections def parse_google_docstring ( docstring : str ) -> Dict : Args docstring ( str ) Returns Dict","title":"parse_google_docstring()"}]}