{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Markdown Reference Docs All content under /reference in this documentation was generated by this package running pip install markdown_refdocs markdown_refdocs -o docs/reference markdown_refdocs Then mkdocs was run to build the files mkdocs build","title":"Home"},{"location":"#markdown-reference-docs","text":"All content under /reference in this documentation was generated by this package running pip install markdown_refdocs markdown_refdocs -o docs/reference markdown_refdocs Then mkdocs was run to build the files mkdocs build","title":"Markdown Reference Docs"},{"location":"examples/","text":"Examples Function Python input def parse_google_docstring ( docstring : str , hide_undoc : bool = True , function_name = '' ) -> ParsedDocstring : \"\"\" parses a google-style docsting into a dictionary of the various sections \"\"\" pass Resulting markdown output (code block ticks escaped for display in this document) ## parse\\_google\\_docstring() parses a google-style docsting into a dictionary of the various sections \\`\\`\\`python def parse_google_docstring( docstring: str, hide_undoc: bool = True, function_name='' ) -> ParsedDocstring: \\`\\`\\` **Args** - docstring (`str`) - hide_undoc (`bool`) - function_name **Returns** - [ ParsedDocstring ]( ../types/#class-parseddocstring ) TypedDict Annotations Python input class ParsedFunction ( Parsed ): \"\"\" Result of the combination of parsing the source code and combining with the docstring of a function \"\"\" parameters : List [ ParsedParameter ] returns : ParsedReturn note : str raises : List [ str ] examples : List [ str ] description : str is_static : bool is_method : bool is_class_method : bool is_getter : bool resulting markdown output ## class ParsedFunction **inherits** [ Parsed ]( #parsed ) Result of the combination of parsing the source code and combining with the docstring of a function **Attributes** - parameters (List\\[[ ParsedParameter ]( #class-parsedparameter )\\]) - returns ([ParsedReturn](#class-parsedreturn)) - note (`str`) - raises (`List[str]`) - examples (`List[str]`) - description (`str`) - is_static (`bool`) - is_method (`bool`) - is_class_method (`bool`) - is_getter (`bool`)","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#function","text":"Python input def parse_google_docstring ( docstring : str , hide_undoc : bool = True , function_name = '' ) -> ParsedDocstring : \"\"\" parses a google-style docsting into a dictionary of the various sections \"\"\" pass Resulting markdown output (code block ticks escaped for display in this document) ## parse\\_google\\_docstring() parses a google-style docsting into a dictionary of the various sections \\`\\`\\`python def parse_google_docstring( docstring: str, hide_undoc: bool = True, function_name='' ) -> ParsedDocstring: \\`\\`\\` **Args** - docstring (`str`) - hide_undoc (`bool`) - function_name **Returns** - [ ParsedDocstring ]( ../types/#class-parseddocstring )","title":"Function"},{"location":"examples/#typeddict-annotations","text":"Python input class ParsedFunction ( Parsed ): \"\"\" Result of the combination of parsing the source code and combining with the docstring of a function \"\"\" parameters : List [ ParsedParameter ] returns : ParsedReturn note : str raises : List [ str ] examples : List [ str ] description : str is_static : bool is_method : bool is_class_method : bool is_getter : bool resulting markdown output ## class ParsedFunction **inherits** [ Parsed ]( #parsed ) Result of the combination of parsing the source code and combining with the docstring of a function **Attributes** - parameters (List\\[[ ParsedParameter ]( #class-parsedparameter )\\]) - returns ([ParsedReturn](#class-parsedreturn)) - note (`str`) - raises (`List[str]`) - examples (`List[str]`) - description (`str`) - is_static (`bool`) - is_method (`bool`) - is_class_method (`bool`) - is_getter (`bool`)","title":"TypedDict Annotations"},{"location":"reference/markdown_refdocs/links/","text":"markdown_refdocs.links create_types_mapping() Creates mapping of type name to links def create_types_mapping ( modules : Dict [ str , ParsedModule ]) -> Dict [ str , str ]: Args modules (Dict[ str , ParsedModule ]) Returns Dict[str, str] Note This only links within a package","title":"markdown_refdocs.links"},{"location":"reference/markdown_refdocs/links/#markdown_refdocslinks","text":"","title":"markdown_refdocs.links"},{"location":"reference/markdown_refdocs/links/#create_types_mapping","text":"Creates mapping of type name to links def create_types_mapping ( modules : Dict [ str , ParsedModule ]) -> Dict [ str , str ]: Args modules (Dict[ str , ParsedModule ]) Returns Dict[str, str] Note This only links within a package","title":"create_types_mapping()"},{"location":"reference/markdown_refdocs/main/","text":"markdown_refdocs.main class ModuleAnalyzer inherits ast.NodeVisitor Parse a python module into reference docs using the source code and docstrings ModuleAnalyzer.__init__() def __init__ ( self , filename : str , prefix : str = '' , hide_private : bool = True , hide_undoc : bool = True , hide_undoc_args : bool = True , namespace_headers : bool = False , ): Args filename ( str ) prefix ( str ) hide_private ( bool ) hide_undoc ( bool ) hide_undoc_args ( bool ) namespace_headers ( bool ) ModuleAnalyzer.get_function_def_segment() Get the source code lines covering the function defintion def get_function_def_segment ( self , node : ast . FunctionDef ) -> str : Args node ( ast.FunctionDef ) Returns str ModuleAnalyzer.visit_ClassDef() convert a class into markdown def visit_ClassDef ( self , node : ast . ClassDef ) -> ParsedClass : Args node ( ast.ClassDef ) Returns ParsedClass ModuleAnalyzer.visit_FunctionDef() convert a function into markdown def visit_FunctionDef ( self , node : ast . FunctionDef ) -> ParsedFunction : Args node ( ast.FunctionDef ) Returns ParsedFunction ModuleAnalyzer.visit_Module() Convert a module into markdown def visit_Module ( self , node : ast . Module ) -> ParsedModule : Args node ( ast.Module ) Returns ParsedModule parse_module_file() convert a module into markdown def parse_module_file ( filename : str , prefix : str = '' , hide_private : bool = True , hide_undoc : bool = True , hide_undoc_args : bool = True , namespace_headers : bool = False , ) -> ParsedModule : Args filename ( str ): the path to the file to be read prefix ( str ): the portion of the path that is not part of the package hide_private ( bool ): hide privated functions, do not document (does not apply to init ) hide_undoc ( bool ): exclude undocumented functions (no docstring) hide_undoc_args ( bool ): do not list arguments with neither type nor description namespace_headers ( bool ) Returns ParsedModule : the markdown string for this module","title":"markdown_refdocs.main"},{"location":"reference/markdown_refdocs/main/#markdown_refdocsmain","text":"","title":"markdown_refdocs.main"},{"location":"reference/markdown_refdocs/main/#class-moduleanalyzer","text":"inherits ast.NodeVisitor Parse a python module into reference docs using the source code and docstrings","title":"class ModuleAnalyzer"},{"location":"reference/markdown_refdocs/main/#moduleanalyzer__init__","text":"def __init__ ( self , filename : str , prefix : str = '' , hide_private : bool = True , hide_undoc : bool = True , hide_undoc_args : bool = True , namespace_headers : bool = False , ): Args filename ( str ) prefix ( str ) hide_private ( bool ) hide_undoc ( bool ) hide_undoc_args ( bool ) namespace_headers ( bool )","title":"ModuleAnalyzer.__init__()"},{"location":"reference/markdown_refdocs/main/#moduleanalyzerget_function_def_segment","text":"Get the source code lines covering the function defintion def get_function_def_segment ( self , node : ast . FunctionDef ) -> str : Args node ( ast.FunctionDef ) Returns str","title":"ModuleAnalyzer.get_function_def_segment()"},{"location":"reference/markdown_refdocs/main/#moduleanalyzervisit_classdef","text":"convert a class into markdown def visit_ClassDef ( self , node : ast . ClassDef ) -> ParsedClass : Args node ( ast.ClassDef ) Returns ParsedClass","title":"ModuleAnalyzer.visit_ClassDef()"},{"location":"reference/markdown_refdocs/main/#moduleanalyzervisit_functiondef","text":"convert a function into markdown def visit_FunctionDef ( self , node : ast . FunctionDef ) -> ParsedFunction : Args node ( ast.FunctionDef ) Returns ParsedFunction","title":"ModuleAnalyzer.visit_FunctionDef()"},{"location":"reference/markdown_refdocs/main/#moduleanalyzervisit_module","text":"Convert a module into markdown def visit_Module ( self , node : ast . Module ) -> ParsedModule : Args node ( ast.Module ) Returns ParsedModule","title":"ModuleAnalyzer.visit_Module()"},{"location":"reference/markdown_refdocs/main/#parse_module_file","text":"convert a module into markdown def parse_module_file ( filename : str , prefix : str = '' , hide_private : bool = True , hide_undoc : bool = True , hide_undoc_args : bool = True , namespace_headers : bool = False , ) -> ParsedModule : Args filename ( str ): the path to the file to be read prefix ( str ): the portion of the path that is not part of the package hide_private ( bool ): hide privated functions, do not document (does not apply to init ) hide_undoc ( bool ): exclude undocumented functions (no docstring) hide_undoc_args ( bool ): do not list arguments with neither type nor description namespace_headers ( bool ) Returns ParsedModule : the markdown string for this module","title":"parse_module_file()"},{"location":"reference/markdown_refdocs/markdown/","text":"markdown_refdocs.markdown admonitions_to_markdown() Generate markdown-style admonitions def admonitions_to_markdown ( parsed : Dict [ str , List [ str ]]) -> str : Args parsed ( Dict[str, List[str]] ) Returns str Examples admonitions_to_markdown ({ 'note' : [ 'make a note of this' ]}) admonitions_to_markdown ({ 'warning' : [ 'this is important' ]}) function_to_markdown() Generate a markdown string for a function definition def function_to_markdown ( parsed : ParsedFunction , heading_level : int = 2 , types_links : Dict [ str , str ] = {} ) -> str : Args parsed ( ParsedFunction ) heading_level ( int ) types_links ( Dict[str, str] ) Returns str","title":"markdown_refdocs.markdown"},{"location":"reference/markdown_refdocs/markdown/#markdown_refdocsmarkdown","text":"","title":"markdown_refdocs.markdown"},{"location":"reference/markdown_refdocs/markdown/#admonitions_to_markdown","text":"Generate markdown-style admonitions def admonitions_to_markdown ( parsed : Dict [ str , List [ str ]]) -> str : Args parsed ( Dict[str, List[str]] ) Returns str Examples admonitions_to_markdown ({ 'note' : [ 'make a note of this' ]}) admonitions_to_markdown ({ 'warning' : [ 'this is important' ]})","title":"admonitions_to_markdown()"},{"location":"reference/markdown_refdocs/markdown/#function_to_markdown","text":"Generate a markdown string for a function definition def function_to_markdown ( parsed : ParsedFunction , heading_level : int = 2 , types_links : Dict [ str , str ] = {} ) -> str : Args parsed ( ParsedFunction ) heading_level ( int ) types_links ( Dict[str, str] ) Returns str","title":"function_to_markdown()"},{"location":"reference/markdown_refdocs/parsers/","text":"markdown_refdocs.parsers parse_google_docstring() parses a google-style docsting into a dictionary of the various sections def parse_google_docstring ( docstring : str , hide_undoc : bool = True , function_name = '' ) -> ParsedDocstring : Args docstring ( str ): the docstring to parse hide_undoc ( bool ): if True, undocumented arguments will be marked as hidden function_name: name of the function the docstring is for (only used in debugging) Returns ParsedDocstring","title":"markdown_refdocs.parsers"},{"location":"reference/markdown_refdocs/parsers/#markdown_refdocsparsers","text":"","title":"markdown_refdocs.parsers"},{"location":"reference/markdown_refdocs/parsers/#parse_google_docstring","text":"parses a google-style docsting into a dictionary of the various sections def parse_google_docstring ( docstring : str , hide_undoc : bool = True , function_name = '' ) -> ParsedDocstring : Args docstring ( str ): the docstring to parse hide_undoc ( bool ): if True, undocumented arguments will be marked as hidden function_name: name of the function the docstring is for (only used in debugging) Returns ParsedDocstring","title":"parse_google_docstring()"},{"location":"reference/markdown_refdocs/types/","text":"markdown_refdocs.types Parsed Parsed : TypedDict = TypedDict ( 'Parsed' , { 'name' : str , 'source_code' : str , 'hidden' : bool }) Attributes name ( str ) source_code ( str ) hidden ( bool ) ADMONITIONS ADMONITIONS = [ 'warning' , 'note' , 'info' , 'bug' , 'tip' , 'question' , 'failure' , 'danger' , 'quote' , 'todo' , ] class ParsedParameter inherits Parsed Attributes default_value ( str ) type ( str ) description ( str ) class ParsedReturn inherits TypedDict Attributes type ( str ) description ( str ) class ParsedFunction inherits Parsed Result of the combination of parsing the source code and combining with the docstring of a function Attributes parameters (List[ ParsedParameter ]) returns ( ParsedReturn ) note ( str ) raises ( List[str] ) examples ( List[str] ) description ( str ) is_static ( bool ) is_method ( bool ) is_class_method ( bool ) is_getter ( bool ) class ParsedDocstring inherits TypedDict Attributes description ( str ) note ( str ) examples ( List[str] ) raises ( List[str] ) returns ( ParsedReturn ) parameters (List[ ParsedParameter ]) attributes (List[ ParsedParameter ]) todo ( List[str] ) class ParsedVariable inherits Parsed Attributes type ( str ) description ( str ) value ( str ) class ParsedClass inherits Parsed Attributes functions (List[ ParsedFunction ]) variables (List[ ParsedVariable ]) description ( str ) inherits ( List[str] ) class ParsedModule inherits Parsed Attributes classes (List[ ParsedClass ]) functions (List[ ParsedFunction ]) variables (List[ ParsedVariable ])","title":"markdown_refdocs.types"},{"location":"reference/markdown_refdocs/types/#markdown_refdocstypes","text":"","title":"markdown_refdocs.types"},{"location":"reference/markdown_refdocs/types/#parsed","text":"Parsed : TypedDict = TypedDict ( 'Parsed' , { 'name' : str , 'source_code' : str , 'hidden' : bool }) Attributes name ( str ) source_code ( str ) hidden ( bool )","title":"Parsed"},{"location":"reference/markdown_refdocs/types/#admonitions","text":"ADMONITIONS = [ 'warning' , 'note' , 'info' , 'bug' , 'tip' , 'question' , 'failure' , 'danger' , 'quote' , 'todo' , ]","title":"ADMONITIONS"},{"location":"reference/markdown_refdocs/types/#class-parsedparameter","text":"inherits Parsed Attributes default_value ( str ) type ( str ) description ( str )","title":"class ParsedParameter"},{"location":"reference/markdown_refdocs/types/#class-parsedreturn","text":"inherits TypedDict Attributes type ( str ) description ( str )","title":"class ParsedReturn"},{"location":"reference/markdown_refdocs/types/#class-parsedfunction","text":"inherits Parsed Result of the combination of parsing the source code and combining with the docstring of a function Attributes parameters (List[ ParsedParameter ]) returns ( ParsedReturn ) note ( str ) raises ( List[str] ) examples ( List[str] ) description ( str ) is_static ( bool ) is_method ( bool ) is_class_method ( bool ) is_getter ( bool )","title":"class ParsedFunction"},{"location":"reference/markdown_refdocs/types/#class-parseddocstring","text":"inherits TypedDict Attributes description ( str ) note ( str ) examples ( List[str] ) raises ( List[str] ) returns ( ParsedReturn ) parameters (List[ ParsedParameter ]) attributes (List[ ParsedParameter ]) todo ( List[str] )","title":"class ParsedDocstring"},{"location":"reference/markdown_refdocs/types/#class-parsedvariable","text":"inherits Parsed Attributes type ( str ) description ( str ) value ( str )","title":"class ParsedVariable"},{"location":"reference/markdown_refdocs/types/#class-parsedclass","text":"inherits Parsed Attributes functions (List[ ParsedFunction ]) variables (List[ ParsedVariable ]) description ( str ) inherits ( List[str] )","title":"class ParsedClass"},{"location":"reference/markdown_refdocs/types/#class-parsedmodule","text":"inherits Parsed Attributes classes (List[ ParsedClass ]) functions (List[ ParsedFunction ]) variables (List[ ParsedVariable ])","title":"class ParsedModule"}]}